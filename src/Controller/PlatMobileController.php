<?php

namespace App\Controller;

use App\Entity\Plat;
use App\Entity\Utilisateur;
use Exception;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

class PlatMobileController extends AbstractController
{
    /**
     * @Route("/platmobile", name="app_plat_mobile")
     */
    public function home()
    {
        $evenements = $this->getDoctrine()
            ->getRepository(Plat::class)
            ->findAll();
        $encoders = [new XmlEncoder(), new JsonEncoder()];
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceHandler(function ($object) {
            return $object->getId();
        });
        $normalizers = [$normalizer];
        $serializer = new Serializer($normalizers, $encoders);
        $formatted = $serializer->normalize($evenements);
        return new JsonResponse($formatted);
    }

    /**
     * @Route("/AjoutePlat/", name="app_ajout_mobileajout", methods={"POST"})
     */
    public function Ajoute(Request $request)
    {
        try {
            $plat = new Plat();

            $plat->setNomplat($request->get('nomplat'));
            $plat->setPrixplat($request->get('prixplat'));
            $plat->setPhotoplat($request->get('photoplat'));
            $plat->setDescription($request->get('description'));

            $em = $this->getDoctrine()->getManager();
            $em->persist($plat);
            $em->flush();
            $encoders = [new XmlEncoder(), new JsonEncoder()];
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = [$normalizer];
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($plat);
            return new JsonResponse($formatted);
        } catch (Exception $e) {
            echo 'Exception reÃ§ue : ', $e->getMessage(), "\n";
        }
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
